scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    user(id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"]), email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])): User @find
    users(name: String @where(operator: "like")): [User!]! @all

    posts: [Post!]! @all
    post(id: ID! @eq): Post @find

    clients: [Client!]! @all
    client(id: ID! @eq): Client @find

    targetGroups: [TargetGroup!]! @all
    targetGroup(id: ID! @eq): TargetGroup @find

    conditions: [Condition!]! @all
    condition(id: ID! @eq): Condition @find
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

type Post {
    id: ID!
    title: String!
    content: String!
    created_at: DateTime!
    updated_at: DateTime!
}

input PostInput {
    title: String!
    content: String!
}

type Condition {
    id: ID!
    title: String!
    description: String!
    created_at: DateTime!
    updated_at: DateTime!
}

input ConditionInput {
    title: String!
    description: String!
}

type TargetGroup {
    id: ID!
    title: String!
}

type Client {
    id: ID!
    first_name: String!
    last_name: String!
    email: String!
    age: String!
    height: String!
    weight: String!
    company: String!
    information: String!
    target_group_id: String!
    condition_id: String!
    created_at: DateTime!
    updated_at: DateTime!
}

input TargetGroupInput {
    title: String!
}

input ClientInput {
    first_name: String!
    last_name: String!
    email: String!
    age: String!
    height: String!
    weight: String!
    company: String!
    information: String!
    target_group_id: String!
    condition_id: String!
}

type Mutation {
    createPost(input: PostInput! @spread): Post @create
    updatePost(id: ID! @eq, input: PostInput! @spread): Post @update
    deletePost(id: ID @whereKey): Post @delete

    createCondition(input: ConditionInput! @spread): Condition @create
    updateCondition(id: ID! @eq, input: ConditionInput! @spread): Condition @update
    deleteCondition(id: ID @whereKey): Condition @delete

    createClient(input: ClientInput! @spread): Client @create
    updateClient(id: ID! @eq, input: ClientInput! @spread): Client @update
    deleteClient(id: ID @whereKey): Client @delete

    createTargetGroup(input: TargetGroupInput! @spread): TargetGroup @create
    updateTargetGroup(id: ID! @eq, input: TargetGroupInput! @spread): TargetGroup @update
    deleteTargetGroup(id: ID @whereKey): TargetGroup @delete
}
